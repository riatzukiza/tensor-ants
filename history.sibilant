(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(require! dl 'deeplearn)
(meta (assign sibilant.dir  "./") null)
(print dl)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(meta (assign sibilant.dir  "./") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(import-namespace kit)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(import-namespace interface)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit-html/src/dom")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit-html/src/dom")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(meta (assign sibilant.dir  "./") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(import-namespace kit)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(import-namespace interface)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "../inc/misc.sibilant")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit-html/src/dom")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(require! dl 'deeplearn)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var canvas (.create-element document 'canvas))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.append-child document.body)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.append-child document.body canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var W 30 H 30)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state0 (.zeros dl [ W H]))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def-curried 2d-coord (w [x y]) (+ (* y w) x))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var coord (2d-coord W))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state0 (.zeros dl [ W H]))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def-curried coord-2d (w [x y]) (+ (* y w) x))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var coord (coord-2d W))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(macro await (v)
       ["await " v])
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var d (await (state0.data)))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(import-namespace kit)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(import-namespace interface)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "../inc/misc.sibilant")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "./field.sibilant")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(require! dl 'deeplearn
          m 'mathjs)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var canvas (.create-element document 'canvas))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.append-child document.body canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var W 30 H 30)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state0 (.zeros m  W H)

     )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(set state0
     (coord [2 5]) 1
     (coord [3 5]) 1
     (coord [4 5]) 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state0 (.zeros m  W H)

     )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def-curried coord-2d (w [x y]) (+ (* y w) x))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var coord (coord-2d W)
     kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]])
                        [3 3 1 1])
     state (dl.variable
                ( dl.cast
                  ( dl.reshape state0 [1 H W 1])
                  "float32")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var coord (coord-2d W)
     kernel (dl.reshape (dl.ones [3 3]) 
                        [3 3 1 1])
     state (dl.variable
                ( dl.cast
                  ( dl.reshape state0 [1 H W 1])
                  "float32")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var coord (coord-2d W)
     kernel (dl.reshape (dl.ones [3 3]) 
                        [3 3 1 1])
     )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var coord (coord-2d W)
     kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state (dl.variable
            ( dl.cast
              ( dl.reshape state0 [1 H W 1])
              "float32"))
     )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state (dl.variable
            ( dl.cast
              ( dl.reshape (.tensor dl state0) [1 H W 1])
              "float32"))
     )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state (dl.variable
            ( dl.cast
              ( dl.reshape (.tensor2d dl state0) [1 H W 1])
              "float32"))
     )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(print state0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state (dl.variable
            ( dl.cast
              ( dl.reshape (.tensor2d dl state0.*data) [1 H W 1])
              "float32"))
     )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(print state0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state (pipe (dl.variable)
                 ( dl.cast "float32")
                 ( dl.reshape state0.*data [1 H W 1])))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state (pipe (dl.variable)
                 ( dl.cast "float32")
                 ( dl.reshape state0.*data [1 H W 1])))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state (pipe ( dl.reshape state0.*data [1 H W 1])
                 ( dl.cast "float32")
                 (dl.variable)
                 ))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state (dl.variable
            ( dl.cast
              ( dl.reshape state0.*data [1 H W 1])
              "float32")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state0 (.zeros m  W H))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set state0 [2 5] 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set state0 [3 5] 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set state0 [4 5] 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var kernel (pipe (dl.tensor [[1 1 1]
                              [1 0 1]
                              [1 1 1]])

                  (dl.reshape  [3 3 1 1])))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state (dl.variable
            ( dl.cast
              ( dl.reshape state0.*data [1 H W 1])
              "float32")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state0-tensor (dl.tensor state0.*data))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def step ()
     (var neighbors (dl.conv2d state kernel [1 1 1 1] "SAME"))
     (var survive (dl.logical-and (dl.equals state 1)
                                  (dl.equals neighbors 2))
          born (dl.equals neighbors 3))
     (state.assign (dl.cast (dl.logical-or survive born)
                            "float32")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(meta (assign sibilant.dir  "./") null)
(def step ()
     (var neighbors (dl.conv2d state kernel [1 1 1 1] "SAME"))
     (var survive (dl.logical-and (dl.equals state 1)
                                  (dl.equals neighbors 2))
          born (dl.equals neighbors 3))
     (state.assign (dl.cast (dl.logical-or survive born)
                            "float32")))
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var game-field (colored black [H W] state))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(var black (rgb 0 0 0 ))
(meta (assign sibilant.dir  "./") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var game-field (colored black [H W] state))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(set-interval (-> (step)
                  (.render game-field))
              1000)
(meta (assign sibilant.dir  "./") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def step ()
     (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
     (var survive (dl.logical-and (dl.equals state 1)
                                  (dl.equals neighbors 2))
          born (dl.equals neighbors 3))
     (state.assign (dl.cast (dl.logical-or survive born)
                            "float32")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def step ()
     (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
     (var survive (dl.logical-and (dl.equal state 1)
                                  (dl.equal neighbors 2))
          born (dl.equal neighbors 3))
     (state.assign (dl.cast (dl.logical-or survive born)
                            "float32")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def step ()
     (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
     (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                  (dl.equal neighbors (dl.scalar 2 "float32")))
          born (dl.equal neighbors (dl.scalar 3 "float32")))
     (state.assign (dl.cast (dl.logical-or survive born)
                            "float32")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var running? true)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 30 H 30)
(var state0 (.zeros m  W H))
(.set state0 [2 5] 1)
(.set state0 [3 5] 1)
(.set state0 [4 5] 1)
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (dl.tensor state0.*data))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
     (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                  (dl.equal neighbors (dl.scalar 2 "float32")))
          born (dl.equal neighbors (dl.scalar 3 "float32")))
     (state.assign (dl.cast (dl.logical-or survive born)
                            "float32")))
(var black (rgb 0 0 0 ))
(var game-field (colored black [H W] state))
(set-interval (-> (step)
                  (.render game-field canvas))
              1000)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def rgb (r g b ) (lit  r g b ))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var black (rgb 0 0 0 ))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var game-field (colored black [H W] state))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 30 H 30)
(var state0 (.zeros m  W H))
(.set state0 [2 5] 1)
(.set state0 [3 5] 1)
(.set state0 [4 5] 1)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (dl.tensor state0.*data))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
     (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                  (dl.equal neighbors (dl.scalar 2 "float32")))
          born (dl.equal neighbors (dl.scalar 3 "float32")))
     (state.assign (dl.cast (dl.logical-or survive born)
                            "float32")))
(set-interval (-> (step)
                  (.render game-field canvas))
              1000)
(meta (assign sibilant.dir  "./") null)
(var black (rgb 0 0 0 ))
(var game-field (colored black [H W] state))
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.print state)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.data state)
(meta (assign sibilant.dir  "./") null)
(.set state0 [2 5] 1)
(.set state0 [3 5] 1)
(.set state0 [4 5] 1)
(.set state0 [2 5] 1)
(.set state0 [3 5] 1)
(.set state0 [4 5] 1)
(.set state0 [2 5] 1)
(.set state0 [3 5] 1)
(.set state0 [4 5] 1)
(.set state0 [2 5] 1)
(.set state0 [3 5] 1)
(.set state0 [4 5] 1)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(scoped (.set state0 [2 5] 1)
 (.set state0 [3 5] 1)
 (.set state0 [4 5] 1))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(scoped (.set state0 [2 5] 1)
 (.set state0 [3 5] 1)
 (.set state0 [4 5] 1))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 30 H 30)
(var state0 (.zeros m  W H))
(scoped (.set state0 [2 5] 1)
 (.set state0 [3 5] 1)
 (.set state0 [4 5] 1))
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (dl.tensor state0.*data))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
     (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                  (dl.equal neighbors (dl.scalar 2 "float32")))
          born (dl.equal neighbors (dl.scalar 3 "float32")))
     (state.assign (dl.cast (dl.logical-or survive born)
                            "float32")))
(var black (rgb 0 0 0 ))
(.data state)
(meta (assign sibilant.dir  "./") null)
(var red (rgb 255 0 0))
(var game-field (colored red [H W] state))
(set-interval (-> (step)
                  (.render game-field canvas))
              1000)
(print game-field)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.data state)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.data state)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.data state)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.data state)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.data state)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.data state)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.data state)
(meta (assign sibilant.dir  "./") null)
(* 30 30)
(print game-field.shape)
(print game-field.state.shape)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init (  (shape [0 0]) (state (dl.ones shape))))

  (def set ([x y] v) (then (this.state.data) d (set d (+ (* y (first this.shape))
                                                          x) v)))
  (def get ([x y] ) (then (this.state.data) d (get d (+ (* y (first this.shape))
                                                         x))))
  (def-generic render (canvas shape  state)
    (if! (not running?) (return false))
    (var ctx (.get-context canvas "2d")
         [height width] shape)

    (then (state.data) d

          (var image-data (new Image-data height width))
          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)

                (var a (get d i))
                (.*render-cell this a j image-data))

          (.put-image-data ctx image-data 0 0))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (dl.random-uniform H W))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
     (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                  (dl.equal neighbors (dl.scalar 2 "float32")))
          born (dl.equal neighbors (dl.scalar 3 "float32")))
     (state.assign (dl.cast (dl.logical-or survive born)
                            "float32")))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(var game-field (colored red [H W] state))
(meta (assign sibilant.dir  "./") null)
(.data state)
(set-interval (-> (step)
                  (.render game-field canvas))
              0)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (dl.random-uniform [H W]))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
     (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                  (dl.equal neighbors (dl.scalar 2 "float32")))
          born (dl.equal neighbors (dl.scalar 3 "float32")))
     (state.assign (dl.cast (dl.logical-or survive born)
                            "float32")))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(var game-field (colored red [H W] state))
(set-interval (-> (step)
                  (.render game-field canvas))
              0)
(.data state)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (dl.random-uniform [H W]))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
     (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                  (dl.equal neighbors (dl.scalar 2 "float32")))
          born (dl.equal neighbors (dl.scalar 3 "float32")))
     (state.assign (dl.cast (dl.logical-or survive born)
                            "float32")))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(meta (assign sibilant.dir  "./") null)
(set-interval (-> (step)
                  (.render game-field canvas))
              0)
(var game-field (colored red [H W] state))
(.data state)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (dl.cast (dl.random-uniform [H W]) "int32"))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
     (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                  (dl.equal neighbors (dl.scalar 2 "float32")))
          born (dl.equal neighbors (dl.scalar 3 "float32")))
     (state.assign (dl.cast (dl.logical-or survive born)
                            "float32")))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(var game-field (colored red [H W] state))
(meta (assign sibilant.dir  "./") null)
(import-namespace kit)
(set-interval (-> (step)
                  (.render game-field canvas))
              0)
(.data state)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(def step ()
     (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
     (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                  (dl.equal neighbors (dl.scalar 2 "float32")))
          born (dl.equal neighbors (dl.scalar 3 "float32")))
     (state.assign (dl.cast (dl.logical-or survive born)
                            "float32")))
(var game-field (colored red [H W] state))
(set-interval (-> (step)
                  (.render game-field canvas))
              0)
(.data state)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(set canvas.style
     'height 800
     'width 800)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(set canvas.style
     'height 800
     'width 800)
(var W 800 H 800)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                  (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                               (dl.equal neighbors (dl.scalar 2 "float32")))
                       born (dl.equal neighbors (dl.scalar 3 "float32")))
                  (state.assign (dl.cast (dl.logical-or survive born)
                                         "float32")))))
(var black (rgb 0 0 0 ))
(.data state)
(meta (assign sibilant.dir  "./") null)
(set-interval (-> (step)
                  (.render game-field canvas))
              0)
(var game-field (colored red [H W] state))
(var red (rgb 255 0 0))
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(set canvas.style
     'height 800
     'width 800)
(var W 800 H 800)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.cast (dl.logical-or survive born)
                            "float32")))))
(var black (rgb 0 0 0 ))
(.data state)
(meta (assign sibilant.dir  "./") null)
(set-interval (-> (step)
                  (.render game-field canvas))
              0)
(var game-field (colored red [H W] state))
(var red (rgb 255 0 0))
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(set canvas
     'height 800
     'width 800)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.cast (dl.logical-or survive born)
                            "float32")))))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(var game-field (colored red [H W] state))
(set-interval (-> (step)
                  (.render game-field canvas))
              0)
(.data state)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable ( dl.reshape  state0-tensor [1 H W 1])))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "int32"))
                                                (dl.equal neighbors (dl.scalar 2 "int32")))
                        born (dl.equal neighbors (dl.scalar 3 "int32")))
                   (dl.logical-or survive born)))))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(var game-field (colored red [H W] state))
(set-interval (-> (step)
                  (.render game-field canvas))
              0)
(.data state)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable ( dl.reshape  state0-tensor [1 H W 1])))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "int32"))
                                                (dl.equal neighbors (dl.scalar 2 "int32")))
                        born (dl.equal neighbors (dl.scalar 3 "int32")))
                   (dl.logical-or survive born)))))
(def start ()
     (.then (dl.next-frame)
            (-> (step)
                (.render game-field canvas)
                (if! running?
                     (start)
                     ))
            ))
(.data state)
(meta (assign sibilant.dir  "./") null)
(import-namespace kit)
(var red (rgb 255 0 0))
(var game-field (colored red [H W] state))
(var black (rgb 0 0 0 ))
(import-namespace interface)
(include "../inc/misc.sibilant")
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def start ()
     (.then (dl.next-frame)
            (->
             (if! running? (return false))
             (step)
             (.render game-field canvas)

             (start))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(start)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state (dl.variable ( dl.reshape  state0-tensor [1 H W 1])))
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "int32"))
                                                (dl.equal neighbors (dl.scalar 2 "int32")))
                        born (dl.equal neighbors (dl.scalar 3 "int32")))
                   (dl.logical-or survive born)))))
(var red (rgb 255 0 0))
(var black (rgb 0 0 0 ))
(var game-field (colored red [H W] state))
(def start ()
     (.then (dl.next-frame)
            (->
             (if! running? (return false))
             (step)
             (.render game-field canvas)

             (start))))
(start)
(.data state)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (.cast (.greater (dl.random-uniform [H W])
                                    (.scalar dl 0.5 "float32"))
                          "int32"))
(var state (dl.variable ( dl.reshape  state0-tensor [1 H W 1])))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "int32"))
                                                (dl.equal neighbors (dl.scalar 2 "int32")))
                        born (dl.equal neighbors (dl.scalar 3 "int32")))
                   (dl.logical-or survive born)))))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(var game-field (colored red [H W] state))
(meta (assign sibilant.dir  "./") null)
(def start ()
     (.then (dl.next-frame)
            (->
             (if! running? (return false))
             (step)
             (.render game-field canvas)

             (start))))
(.data state)
(start)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(include "../inc/misc.sibilant")
(import-namespace interface)
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable ( dl.reshape  state0-tensor [1 H W 1])))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "int32"))
                                                (dl.equal neighbors (dl.scalar 2 "int32")))
                        born (dl.equal neighbors (dl.scalar 3 "int32")))
                   (dl.logical-or survive born)))))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(var game-field (colored red [H W] state))
(meta (assign sibilant.dir  "./") null)
(.data state)
(start)
(def start ()
     (.then (dl.next-frame)
            (->
             (if! running? (return false))
             (step)
             (.render game-field canvas)

             (start))))
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace interface)
(import-namespace kit)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.cast (dl.logical-or survive born)
                            "float32")))))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(var game-field (colored red [H W] state))
(set-interval (-> (step)
                  (.render game-field canvas))
              0)
(.data state)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.cast (dl.logical-or survive born)
                            "float32")))))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(.data state)
(meta (assign sibilant.dir  "./") null)
(def start ()
     (.then (dl.next-frame)
            (->
             (if! running? (return false))
             (step)
             (.render game-field canvas)

             (start))))
(var game-field (colored red [H W] state))
(start)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height 800
     'width 800)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]]) 
                        [3 3 1 1])
     )
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.cast (dl.logical-or survive born)
                            "float32")))))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(var game-field (colored red [H W] state))
(.data state)
(meta (assign sibilant.dir  "./") null)
(set-interval (-> (step)
                  (.render game-field canvas))
              0)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]])
                        [3 3 1 1]))
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.cast (dl.logical-or survive born)
                            "float32")))))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(start)
(meta (assign sibilant.dir  "./") null)
(def start ()
     (.then (dl.next-frame)
            (->
             (if! (not running?) (return false))
             (step)
             (.render game-field canvas)

             (start))))
(var game-field (colored red [H W] state))
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.logical-or survive born)))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.logical-or survive born)))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(print 'yo)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(print 'yo)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]])
                        [3 3 1 1]))
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.logical-or survive born)))))
(var black (rgb 0 0 0 ))
(def start ()
     (.then (dl.next-frame)
            (->
             (if! (not running?) (return false))
             (step)
             (.render game-field canvas)

             (start))))
(start)
(meta (assign sibilant.dir  "./") null)
(var game-field (colored red [H W] state))
(print 'yo)
(var red (rgb 255 0 0))
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]])
                        [3 3 1 1]))
(var state0-tensor (dl.cast (.greater (dl.random-uniform [H W])
                                      (.scalar dl 0.5 "float32"))
                            "bool"))
(var state (dl.variable ( dl.reshape  state0-tensor [1 H W 1])
))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.logical-or survive born)))))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(print 'yo)
(var game-field (colored red [H W] state))
(def start ()
     (.then (dl.next-frame)
            (->
             (if! (not running?) (return false))
             (step)
             (.render game-field canvas)

             (start))))
(start)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]])
                        [3 3 1 1]))
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.logical-or survive born)))))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(print 'yo)
(var game-field (colored red [H W] state))
(def start ()
     (.then (dl.next-frame)
            (->
             (if! (not running?) (return false))
             (step)
             (.render game-field canvas)

             (start))))
(start)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.cast (dl.logical-or survive born)
                            "float32")))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(start)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]])
                        [3 3 1 1]))
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.cast (dl.logical-or survive born)
                            "float32")))))
(var black (rgb 0 0 0 ))
(var red (rgb 255 0 0))
(var game-field (colored red [H W] state))
(def start ()
     (.then (dl.next-frame)
            (->
             (if! (not running?) (return false))
             (step)
             (.render game-field canvas)

             (start))))
(start)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "./field.sibilant")
(require! dl 'deeplearn
          m 'mathjs)
(var canvas (.create-element document 'canvas))
(.append-child document.body canvas)
(var W 800 H 800)
(set canvas
     'height  H
     'width W)
(def rgb (r g b ) (lit  r g b ))
(var kernel (dl.reshape (dl.tensor2d [[1 1 1]
                                      [1 0 1]
                                      [1 1 1]])
                        [3 3 1 1]))
(var state0-tensor (.greater (dl.random-uniform [H W])
                             (.scalar dl 0.5 "float32")))
(var state (dl.variable
            ( dl.cast
              ( dl.reshape  state0-tensor [1 H W 1])
              "float32")))
(var running? true)
(def step ()
     (state.assign
      (dl.tidy (-> (var neighbors (dl.conv2d state kernel [1 1 1 1] "same"))
                   (var survive (dl.logical-and (dl.equal state (dl.scalar 1 "float32"))
                                                (dl.equal neighbors (dl.scalar 2 "float32")))
                        born (dl.equal neighbors (dl.scalar 3 "float32")))
                   (dl.cast (dl.logical-or survive born)
                            "float32")))))
(var black (rgb 0 0 0 ))
(start)
(meta (assign sibilant.dir  "./") null)
(var game-field (colored red [H W] state))
(var red (rgb 255 0 0))
(def start ()
     (.then (dl.next-frame)
            (->
             (if! (not running?) (return false))
             (step)
             (.render game-field canvas)

             (start))))
