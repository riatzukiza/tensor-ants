(define Field Interface

  (init (  (shape [0 0]) (state (dl.ones shape))))

  (def set ([x y] v) (then (this.state.data) d (set d (+ (* y (first this.shape))
                                                          x) v)))
  (def get ([x y] ) (then (this.state.data) d (get d (+ (* y (first this.shape))
                                                         x))))
  (def-generic render (canvas shape  state)
    (if! (not running?) (return false))
    (var ctx (.get-context canvas "2d")
         [height width] shape)

    (then (state.data) d

          (var image-data (new Image-data height width))
          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)

                (var a (get d i))
                (.*render-cell this a j image-data))

          (.put-image-data ctx image-data 0 0))))

(define Colored Field
  (init (color shape state) (.call Field.init this shape state))
  (def *render-cell (a j image-data )
       (set image-data.data
            j       (Math.round (* this.color.r a))
            (+ j 1) (Math.round (* this.color.g a))
            (+ j 2) (Math.round (* this.color.b a))
            (+ j 3) 255)))
(var colored (create Colored))
